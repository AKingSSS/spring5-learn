<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--表明引用的参数配置文件是db.properties-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>
                    db.properties
                </value>
            </list>
        </property>
    </bean>

    <!--使用 spring的数据源替换mybatis的配置化 c3p0, dpcp,druid
      这里使用的 spring 的 jdbc
    -->
    <!--数据库连接池-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>

    <!-- 配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="mybatis.xml"/>
    </bean>

    <!--自动扫描注入-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property  name="basePackage"  value="com.aking.learn.mapper"/>
    </bean>

    <!--配置声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg ref="dataSource" />
    </bean>
    <!-- 方式一： 开启事务注解 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- 在方法所在类上加注解 -->

    <!-- 方式二：结合aop实现事务-->
    <!-- 配置通知 -->
<!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="query*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    &lt;!&ndash;配置事务切入&ndash;&gt;
    <aop:config>
        &lt;!&ndash;切入点  &ndash;&gt;
        <aop:pointcut expression="execution(* com.aking.learn.service..*.*(..))" id="pc"/>
        &lt;!&ndash; 配置切面 &ndash;&gt;
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pc" />
    </aop:config>-->

    <!--指定要扫描的包,这个包下的注解才能生效-->
    <context:component-scan base-package="com.aking.learn" />
    <!--注解支持 @ Resource 、@ PostConstruct、@ PreDestroy、@PersistenceContext、@Autowired、@Required  -->
    <context:annotation-config/>
</beans>